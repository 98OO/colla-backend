plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.ec4j.editorconfig' version '0.0.2'
    id 'checkstyle'
    id 'com.epages.restdocs-api-spec' version '0.18.2'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'jacoco'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

group = 'one'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /* Boot */
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.4'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:3.2.4'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.2.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.4'

    /* Lombok */
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    /* Databases */
    runtimeOnly 'com.h2database:h2:2.2.224'
    runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'

    /* Redis */
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.4'

    /* Security */
    implementation 'org.springframework.boot:spring-boot-starter-security:3.2.4'
    testImplementation 'org.springframework.security:spring-security-test:6.2.3'

    /* JWT */
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    /* Spring Rest Docs */
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.1'
    testImplementation "com.epages:restdocs-api-spec-mockmvc:0.18.2"
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    /* Logback JSON */
    implementation 'net.logstash.logback:logstash-logback-encoder:6.1'
    compileOnly 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    compileOnly 'ch.qos.logback.contrib:logback-json-classic:0.1.5'

    /* Gmail */
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.2.4'

    /* findbugs */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
    }
}

def localStaticDocsPath = "${rootDir}/src/main/resources/static/docs/"
def buildStaticDocsPath = "${rootDir}/build/resources/main/static/docs/"
def fileNamePrefix = 'open-api-3.0.1'
def fileFormat = 'yaml'
def swaggerFileName = "${fileNamePrefix}.${fileFormat}"

openapi3 {
    servers = [
            { url = "http://localhost:8080/" },
    ]
    title = "Colla API 문서"
    description = "Spring REST Docs with SwaggerUI."
    version = "0.1.0"
    format = fileFormat
    outputFileNamePrefix = fileNamePrefix
    outputDirectory = buildStaticDocsPath
}

editorconfig {
    excludes = ['build', 'node_modules', '.husky', '**/open-api-3.0.1.yaml', 'docker']
}

check.dependsOn editorconfigCheck

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/rule-config/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${rootDir}/rule-config/naver-checkstyle-suppressions.xml"]
    toolVersion = "8.42"
    sourceSets = [sourceSets.main]
    ignoreFailures = false
}

checkstyleMain.source = fileTree('src/main/java')

tasks.register('ensureStaticFolder') {
    doFirst {
        def staticFolder = file("${projectDir}/src/main/resources/static")
        if (!staticFolder.exists()) {
            staticFolder.mkdirs()
        }
    }
}
processResources.dependsOn('ensureStaticFolder')

bootJar {
    dependsOn("openapi3")

    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}${swaggerFileName}")
        def securitySchemesContent = "  securitySchemes:\n" +
                "    APIKey:\n" +
                "      type: apiKey\n" +
                "      name: Authorization\n" +
                "      in: header\n" +
                "security:\n" +
                "  - APIKey: []  # Apply the security scheme here\n"

        swaggerUIFile.append securitySchemesContent
    }
    doLast {
        delete "${localStaticDocsPath}${swaggerFileName}"
        copy {
            from "${openapi3.outputDirectory}${swaggerFileName}"
            into "${localStaticDocsPath}"
        }
    }
}

jar {
    enabled = false
}
